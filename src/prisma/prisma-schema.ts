// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateFollow {
  count: Int!
}

type AggregateNotes {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Follow {
  id: ID!
  followed: User!
  githubID: String!
  notes(where: NotesWhereInput, orderBy: NotesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notes!]
}

type FollowConnection {
  pageInfo: PageInfo!
  edges: [FollowEdge]!
  aggregate: AggregateFollow!
}

input FollowCreateInput {
  id: ID
  followed: UserCreateOneWithoutFollowingInput!
  githubID: String!
  notes: NotesCreateManyWithoutForInput
}

input FollowCreateManyWithoutFollowedInput {
  create: [FollowCreateWithoutFollowedInput!]
  connect: [FollowWhereUniqueInput!]
}

input FollowCreateOneWithoutNotesInput {
  create: FollowCreateWithoutNotesInput
  connect: FollowWhereUniqueInput
}

input FollowCreateWithoutFollowedInput {
  id: ID
  githubID: String!
  notes: NotesCreateManyWithoutForInput
}

input FollowCreateWithoutNotesInput {
  id: ID
  followed: UserCreateOneWithoutFollowingInput!
  githubID: String!
}

type FollowEdge {
  node: Follow!
  cursor: String!
}

enum FollowOrderByInput {
  id_ASC
  id_DESC
  githubID_ASC
  githubID_DESC
}

type FollowPreviousValues {
  id: ID!
  githubID: String!
}

input FollowScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  githubID: String
  githubID_not: String
  githubID_in: [String!]
  githubID_not_in: [String!]
  githubID_lt: String
  githubID_lte: String
  githubID_gt: String
  githubID_gte: String
  githubID_contains: String
  githubID_not_contains: String
  githubID_starts_with: String
  githubID_not_starts_with: String
  githubID_ends_with: String
  githubID_not_ends_with: String
  AND: [FollowScalarWhereInput!]
  OR: [FollowScalarWhereInput!]
  NOT: [FollowScalarWhereInput!]
}

type FollowSubscriptionPayload {
  mutation: MutationType!
  node: Follow
  updatedFields: [String!]
  previousValues: FollowPreviousValues
}

input FollowSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FollowWhereInput
  AND: [FollowSubscriptionWhereInput!]
  OR: [FollowSubscriptionWhereInput!]
  NOT: [FollowSubscriptionWhereInput!]
}

input FollowUpdateInput {
  followed: UserUpdateOneRequiredWithoutFollowingInput
  githubID: String
  notes: NotesUpdateManyWithoutForInput
}

input FollowUpdateManyDataInput {
  githubID: String
}

input FollowUpdateManyMutationInput {
  githubID: String
}

input FollowUpdateManyWithoutFollowedInput {
  create: [FollowCreateWithoutFollowedInput!]
  delete: [FollowWhereUniqueInput!]
  connect: [FollowWhereUniqueInput!]
  set: [FollowWhereUniqueInput!]
  disconnect: [FollowWhereUniqueInput!]
  update: [FollowUpdateWithWhereUniqueWithoutFollowedInput!]
  upsert: [FollowUpsertWithWhereUniqueWithoutFollowedInput!]
  deleteMany: [FollowScalarWhereInput!]
  updateMany: [FollowUpdateManyWithWhereNestedInput!]
}

input FollowUpdateManyWithWhereNestedInput {
  where: FollowScalarWhereInput!
  data: FollowUpdateManyDataInput!
}

input FollowUpdateOneRequiredWithoutNotesInput {
  create: FollowCreateWithoutNotesInput
  update: FollowUpdateWithoutNotesDataInput
  upsert: FollowUpsertWithoutNotesInput
  connect: FollowWhereUniqueInput
}

input FollowUpdateWithoutFollowedDataInput {
  githubID: String
  notes: NotesUpdateManyWithoutForInput
}

input FollowUpdateWithoutNotesDataInput {
  followed: UserUpdateOneRequiredWithoutFollowingInput
  githubID: String
}

input FollowUpdateWithWhereUniqueWithoutFollowedInput {
  where: FollowWhereUniqueInput!
  data: FollowUpdateWithoutFollowedDataInput!
}

input FollowUpsertWithoutNotesInput {
  update: FollowUpdateWithoutNotesDataInput!
  create: FollowCreateWithoutNotesInput!
}

input FollowUpsertWithWhereUniqueWithoutFollowedInput {
  where: FollowWhereUniqueInput!
  update: FollowUpdateWithoutFollowedDataInput!
  create: FollowCreateWithoutFollowedInput!
}

input FollowWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  followed: UserWhereInput
  githubID: String
  githubID_not: String
  githubID_in: [String!]
  githubID_not_in: [String!]
  githubID_lt: String
  githubID_lte: String
  githubID_gt: String
  githubID_gte: String
  githubID_contains: String
  githubID_not_contains: String
  githubID_starts_with: String
  githubID_not_starts_with: String
  githubID_ends_with: String
  githubID_not_ends_with: String
  notes_every: NotesWhereInput
  notes_some: NotesWhereInput
  notes_none: NotesWhereInput
  AND: [FollowWhereInput!]
  OR: [FollowWhereInput!]
  NOT: [FollowWhereInput!]
}

input FollowWhereUniqueInput {
  id: ID
  githubID: String
}

scalar Long

type Mutation {
  createFollow(data: FollowCreateInput!): Follow!
  updateFollow(data: FollowUpdateInput!, where: FollowWhereUniqueInput!): Follow
  updateManyFollows(data: FollowUpdateManyMutationInput!, where: FollowWhereInput): BatchPayload!
  upsertFollow(where: FollowWhereUniqueInput!, create: FollowCreateInput!, update: FollowUpdateInput!): Follow!
  deleteFollow(where: FollowWhereUniqueInput!): Follow
  deleteManyFollows(where: FollowWhereInput): BatchPayload!
  createNotes(data: NotesCreateInput!): Notes!
  updateNotes(data: NotesUpdateInput!, where: NotesWhereUniqueInput!): Notes
  updateManyNoteses(data: NotesUpdateManyMutationInput!, where: NotesWhereInput): BatchPayload!
  upsertNotes(where: NotesWhereUniqueInput!, create: NotesCreateInput!, update: NotesUpdateInput!): Notes!
  deleteNotes(where: NotesWhereUniqueInput!): Notes
  deleteManyNoteses(where: NotesWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notes {
  id: ID!
  for: Follow!
  title: String!
  body: String!
}

type NotesConnection {
  pageInfo: PageInfo!
  edges: [NotesEdge]!
  aggregate: AggregateNotes!
}

input NotesCreateInput {
  id: ID
  for: FollowCreateOneWithoutNotesInput!
  title: String!
  body: String!
}

input NotesCreateManyWithoutForInput {
  create: [NotesCreateWithoutForInput!]
  connect: [NotesWhereUniqueInput!]
}

input NotesCreateWithoutForInput {
  id: ID
  title: String!
  body: String!
}

type NotesEdge {
  node: Notes!
  cursor: String!
}

enum NotesOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
}

type NotesPreviousValues {
  id: ID!
  title: String!
  body: String!
}

input NotesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [NotesScalarWhereInput!]
  OR: [NotesScalarWhereInput!]
  NOT: [NotesScalarWhereInput!]
}

type NotesSubscriptionPayload {
  mutation: MutationType!
  node: Notes
  updatedFields: [String!]
  previousValues: NotesPreviousValues
}

input NotesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotesWhereInput
  AND: [NotesSubscriptionWhereInput!]
  OR: [NotesSubscriptionWhereInput!]
  NOT: [NotesSubscriptionWhereInput!]
}

input NotesUpdateInput {
  for: FollowUpdateOneRequiredWithoutNotesInput
  title: String
  body: String
}

input NotesUpdateManyDataInput {
  title: String
  body: String
}

input NotesUpdateManyMutationInput {
  title: String
  body: String
}

input NotesUpdateManyWithoutForInput {
  create: [NotesCreateWithoutForInput!]
  delete: [NotesWhereUniqueInput!]
  connect: [NotesWhereUniqueInput!]
  set: [NotesWhereUniqueInput!]
  disconnect: [NotesWhereUniqueInput!]
  update: [NotesUpdateWithWhereUniqueWithoutForInput!]
  upsert: [NotesUpsertWithWhereUniqueWithoutForInput!]
  deleteMany: [NotesScalarWhereInput!]
  updateMany: [NotesUpdateManyWithWhereNestedInput!]
}

input NotesUpdateManyWithWhereNestedInput {
  where: NotesScalarWhereInput!
  data: NotesUpdateManyDataInput!
}

input NotesUpdateWithoutForDataInput {
  title: String
  body: String
}

input NotesUpdateWithWhereUniqueWithoutForInput {
  where: NotesWhereUniqueInput!
  data: NotesUpdateWithoutForDataInput!
}

input NotesUpsertWithWhereUniqueWithoutForInput {
  where: NotesWhereUniqueInput!
  update: NotesUpdateWithoutForDataInput!
  create: NotesCreateWithoutForInput!
}

input NotesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  for: FollowWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [NotesWhereInput!]
  OR: [NotesWhereInput!]
  NOT: [NotesWhereInput!]
}

input NotesWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  follow(where: FollowWhereUniqueInput!): Follow
  follows(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follow]!
  followsConnection(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FollowConnection!
  notes(where: NotesWhereUniqueInput!): Notes
  noteses(where: NotesWhereInput, orderBy: NotesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notes]!
  notesesConnection(where: NotesWhereInput, orderBy: NotesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotesConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  follow(where: FollowSubscriptionWhereInput): FollowSubscriptionPayload
  notes(where: NotesSubscriptionWhereInput): NotesSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  githubID: String!
  following(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follow!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  githubID: String!
  following: FollowCreateManyWithoutFollowedInput
}

input UserCreateOneWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFollowingInput {
  id: ID
  githubID: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  githubID_ASC
  githubID_DESC
}

type UserPreviousValues {
  id: ID!
  githubID: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  githubID: String
  following: FollowUpdateManyWithoutFollowedInput
}

input UserUpdateManyMutationInput {
  githubID: String
}

input UserUpdateOneRequiredWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput
  update: UserUpdateWithoutFollowingDataInput
  upsert: UserUpsertWithoutFollowingInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFollowingDataInput {
  githubID: String
}

input UserUpsertWithoutFollowingInput {
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  githubID: String
  githubID_not: String
  githubID_in: [String!]
  githubID_not_in: [String!]
  githubID_lt: String
  githubID_lte: String
  githubID_gt: String
  githubID_gte: String
  githubID_contains: String
  githubID_not_contains: String
  githubID_starts_with: String
  githubID_not_starts_with: String
  githubID_ends_with: String
  githubID_not_ends_with: String
  following_every: FollowWhereInput
  following_some: FollowWhereInput
  following_none: FollowWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  githubID: String
}
`