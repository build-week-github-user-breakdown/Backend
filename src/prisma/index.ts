// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  follow: (where?: FollowWhereInput) => Promise<boolean>;
  note: (where?: NoteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  follow: (where: FollowWhereUniqueInput) => FollowNullablePromise;
  follows: (args?: {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Follow>;
  followsConnection: (args?: {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FollowConnectionPromise;
  note: (where: NoteWhereUniqueInput) => NoteNullablePromise;
  notes: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Note>;
  notesConnection: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFollow: (data: FollowCreateInput) => FollowPromise;
  updateFollow: (args: {
    data: FollowUpdateInput;
    where: FollowWhereUniqueInput;
  }) => FollowPromise;
  updateManyFollows: (args: {
    data: FollowUpdateManyMutationInput;
    where?: FollowWhereInput;
  }) => BatchPayloadPromise;
  upsertFollow: (args: {
    where: FollowWhereUniqueInput;
    create: FollowCreateInput;
    update: FollowUpdateInput;
  }) => FollowPromise;
  deleteFollow: (where: FollowWhereUniqueInput) => FollowPromise;
  deleteManyFollows: (where?: FollowWhereInput) => BatchPayloadPromise;
  createNote: (data: NoteCreateInput) => NotePromise;
  updateNote: (args: {
    data: NoteUpdateInput;
    where: NoteWhereUniqueInput;
  }) => NotePromise;
  updateManyNotes: (args: {
    data: NoteUpdateManyMutationInput;
    where?: NoteWhereInput;
  }) => BatchPayloadPromise;
  upsertNote: (args: {
    where: NoteWhereUniqueInput;
    create: NoteCreateInput;
    update: NoteUpdateInput;
  }) => NotePromise;
  deleteNote: (where: NoteWhereUniqueInput) => NotePromise;
  deleteManyNotes: (where?: NoteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  follow: (
    where?: FollowSubscriptionWhereInput
  ) => FollowSubscriptionPayloadSubscription;
  note: (
    where?: NoteSubscriptionWhereInput
  ) => NoteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FollowOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "githubID_ASC"
  | "githubID_DESC";

export type NoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "githubID_ASC"
  | "githubID_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FollowWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  githubID?: Maybe<String>;
}>;

export interface FollowWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  followed?: Maybe<UserWhereInput>;
  githubID?: Maybe<String>;
  githubID_not?: Maybe<String>;
  githubID_in?: Maybe<String[] | String>;
  githubID_not_in?: Maybe<String[] | String>;
  githubID_lt?: Maybe<String>;
  githubID_lte?: Maybe<String>;
  githubID_gt?: Maybe<String>;
  githubID_gte?: Maybe<String>;
  githubID_contains?: Maybe<String>;
  githubID_not_contains?: Maybe<String>;
  githubID_starts_with?: Maybe<String>;
  githubID_not_starts_with?: Maybe<String>;
  githubID_ends_with?: Maybe<String>;
  githubID_not_ends_with?: Maybe<String>;
  notes_every?: Maybe<NoteWhereInput>;
  notes_some?: Maybe<NoteWhereInput>;
  notes_none?: Maybe<NoteWhereInput>;
  AND?: Maybe<FollowWhereInput[] | FollowWhereInput>;
  OR?: Maybe<FollowWhereInput[] | FollowWhereInput>;
  NOT?: Maybe<FollowWhereInput[] | FollowWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  githubID?: Maybe<String>;
  githubID_not?: Maybe<String>;
  githubID_in?: Maybe<String[] | String>;
  githubID_not_in?: Maybe<String[] | String>;
  githubID_lt?: Maybe<String>;
  githubID_lte?: Maybe<String>;
  githubID_gt?: Maybe<String>;
  githubID_gte?: Maybe<String>;
  githubID_contains?: Maybe<String>;
  githubID_not_contains?: Maybe<String>;
  githubID_starts_with?: Maybe<String>;
  githubID_not_starts_with?: Maybe<String>;
  githubID_ends_with?: Maybe<String>;
  githubID_not_ends_with?: Maybe<String>;
  following_every?: Maybe<FollowWhereInput>;
  following_some?: Maybe<FollowWhereInput>;
  following_none?: Maybe<FollowWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface NoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  for?: Maybe<FollowWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  AND?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  OR?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  NOT?: Maybe<NoteWhereInput[] | NoteWhereInput>;
}

export type NoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  githubID?: Maybe<String>;
}>;

export interface FollowCreateInput {
  id?: Maybe<ID_Input>;
  followed: UserCreateOneWithoutFollowingInput;
  githubID: String;
  notes?: Maybe<NoteCreateManyWithoutForInput>;
}

export interface UserCreateOneWithoutFollowingInput {
  create?: Maybe<UserCreateWithoutFollowingInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  githubID: String;
}

export interface NoteCreateManyWithoutForInput {
  create?: Maybe<NoteCreateWithoutForInput[] | NoteCreateWithoutForInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
}

export interface NoteCreateWithoutForInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
}

export interface FollowUpdateInput {
  followed?: Maybe<UserUpdateOneRequiredWithoutFollowingInput>;
  githubID?: Maybe<String>;
  notes?: Maybe<NoteUpdateManyWithoutForInput>;
}

export interface UserUpdateOneRequiredWithoutFollowingInput {
  create?: Maybe<UserCreateWithoutFollowingInput>;
  update?: Maybe<UserUpdateWithoutFollowingDataInput>;
  upsert?: Maybe<UserUpsertWithoutFollowingInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFollowingDataInput {
  githubID?: Maybe<String>;
}

export interface UserUpsertWithoutFollowingInput {
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface NoteUpdateManyWithoutForInput {
  create?: Maybe<NoteCreateWithoutForInput[] | NoteCreateWithoutForInput>;
  delete?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  set?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  disconnect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  update?: Maybe<
    | NoteUpdateWithWhereUniqueWithoutForInput[]
    | NoteUpdateWithWhereUniqueWithoutForInput
  >;
  upsert?: Maybe<
    | NoteUpsertWithWhereUniqueWithoutForInput[]
    | NoteUpsertWithWhereUniqueWithoutForInput
  >;
  deleteMany?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  updateMany?: Maybe<
    NoteUpdateManyWithWhereNestedInput[] | NoteUpdateManyWithWhereNestedInput
  >;
}

export interface NoteUpdateWithWhereUniqueWithoutForInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateWithoutForDataInput;
}

export interface NoteUpdateWithoutForDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface NoteUpsertWithWhereUniqueWithoutForInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateWithoutForDataInput;
  create: NoteCreateWithoutForInput;
}

export interface NoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  AND?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  OR?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  NOT?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
}

export interface NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput;
  data: NoteUpdateManyDataInput;
}

export interface NoteUpdateManyDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface FollowUpdateManyMutationInput {
  githubID?: Maybe<String>;
}

export interface NoteCreateInput {
  id?: Maybe<ID_Input>;
  for: FollowCreateOneWithoutNotesInput;
  title: String;
  body: String;
}

export interface FollowCreateOneWithoutNotesInput {
  create?: Maybe<FollowCreateWithoutNotesInput>;
  connect?: Maybe<FollowWhereUniqueInput>;
}

export interface FollowCreateWithoutNotesInput {
  id?: Maybe<ID_Input>;
  followed: UserCreateOneWithoutFollowingInput;
  githubID: String;
}

export interface NoteUpdateInput {
  for?: Maybe<FollowUpdateOneRequiredWithoutNotesInput>;
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface FollowUpdateOneRequiredWithoutNotesInput {
  create?: Maybe<FollowCreateWithoutNotesInput>;
  update?: Maybe<FollowUpdateWithoutNotesDataInput>;
  upsert?: Maybe<FollowUpsertWithoutNotesInput>;
  connect?: Maybe<FollowWhereUniqueInput>;
}

export interface FollowUpdateWithoutNotesDataInput {
  followed?: Maybe<UserUpdateOneRequiredWithoutFollowingInput>;
  githubID?: Maybe<String>;
}

export interface FollowUpsertWithoutNotesInput {
  update: FollowUpdateWithoutNotesDataInput;
  create: FollowCreateWithoutNotesInput;
}

export interface NoteUpdateManyMutationInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  githubID: String;
  following?: Maybe<FollowCreateManyWithoutFollowedInput>;
}

export interface FollowCreateManyWithoutFollowedInput {
  create?: Maybe<
    FollowCreateWithoutFollowedInput[] | FollowCreateWithoutFollowedInput
  >;
  connect?: Maybe<FollowWhereUniqueInput[] | FollowWhereUniqueInput>;
}

export interface FollowCreateWithoutFollowedInput {
  id?: Maybe<ID_Input>;
  githubID: String;
  notes?: Maybe<NoteCreateManyWithoutForInput>;
}

export interface UserUpdateInput {
  githubID?: Maybe<String>;
  following?: Maybe<FollowUpdateManyWithoutFollowedInput>;
}

export interface FollowUpdateManyWithoutFollowedInput {
  create?: Maybe<
    FollowCreateWithoutFollowedInput[] | FollowCreateWithoutFollowedInput
  >;
  delete?: Maybe<FollowWhereUniqueInput[] | FollowWhereUniqueInput>;
  connect?: Maybe<FollowWhereUniqueInput[] | FollowWhereUniqueInput>;
  set?: Maybe<FollowWhereUniqueInput[] | FollowWhereUniqueInput>;
  disconnect?: Maybe<FollowWhereUniqueInput[] | FollowWhereUniqueInput>;
  update?: Maybe<
    | FollowUpdateWithWhereUniqueWithoutFollowedInput[]
    | FollowUpdateWithWhereUniqueWithoutFollowedInput
  >;
  upsert?: Maybe<
    | FollowUpsertWithWhereUniqueWithoutFollowedInput[]
    | FollowUpsertWithWhereUniqueWithoutFollowedInput
  >;
  deleteMany?: Maybe<FollowScalarWhereInput[] | FollowScalarWhereInput>;
  updateMany?: Maybe<
    | FollowUpdateManyWithWhereNestedInput[]
    | FollowUpdateManyWithWhereNestedInput
  >;
}

export interface FollowUpdateWithWhereUniqueWithoutFollowedInput {
  where: FollowWhereUniqueInput;
  data: FollowUpdateWithoutFollowedDataInput;
}

export interface FollowUpdateWithoutFollowedDataInput {
  githubID?: Maybe<String>;
  notes?: Maybe<NoteUpdateManyWithoutForInput>;
}

export interface FollowUpsertWithWhereUniqueWithoutFollowedInput {
  where: FollowWhereUniqueInput;
  update: FollowUpdateWithoutFollowedDataInput;
  create: FollowCreateWithoutFollowedInput;
}

export interface FollowScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  githubID?: Maybe<String>;
  githubID_not?: Maybe<String>;
  githubID_in?: Maybe<String[] | String>;
  githubID_not_in?: Maybe<String[] | String>;
  githubID_lt?: Maybe<String>;
  githubID_lte?: Maybe<String>;
  githubID_gt?: Maybe<String>;
  githubID_gte?: Maybe<String>;
  githubID_contains?: Maybe<String>;
  githubID_not_contains?: Maybe<String>;
  githubID_starts_with?: Maybe<String>;
  githubID_not_starts_with?: Maybe<String>;
  githubID_ends_with?: Maybe<String>;
  githubID_not_ends_with?: Maybe<String>;
  AND?: Maybe<FollowScalarWhereInput[] | FollowScalarWhereInput>;
  OR?: Maybe<FollowScalarWhereInput[] | FollowScalarWhereInput>;
  NOT?: Maybe<FollowScalarWhereInput[] | FollowScalarWhereInput>;
}

export interface FollowUpdateManyWithWhereNestedInput {
  where: FollowScalarWhereInput;
  data: FollowUpdateManyDataInput;
}

export interface FollowUpdateManyDataInput {
  githubID?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  githubID?: Maybe<String>;
}

export interface FollowSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FollowWhereInput>;
  AND?: Maybe<FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput>;
  OR?: Maybe<FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput>;
  NOT?: Maybe<FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput>;
}

export interface NoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoteWhereInput>;
  AND?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  OR?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  NOT?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Follow {
  id: ID_Output;
  githubID: String;
}

export interface FollowPromise extends Promise<Follow>, Fragmentable {
  id: () => Promise<ID_Output>;
  followed: <T = UserPromise>() => T;
  githubID: () => Promise<String>;
  notes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FollowSubscription
  extends Promise<AsyncIterator<Follow>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  followed: <T = UserSubscription>() => T;
  githubID: () => Promise<AsyncIterator<String>>;
  notes: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FollowNullablePromise
  extends Promise<Follow | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  followed: <T = UserPromise>() => T;
  githubID: () => Promise<String>;
  notes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  githubID: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  githubID: () => Promise<String>;
  following: <T = FragmentableArray<Follow>>(args?: {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  githubID: () => Promise<AsyncIterator<String>>;
  following: <T = Promise<AsyncIterator<FollowSubscription>>>(args?: {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  githubID: () => Promise<String>;
  following: <T = FragmentableArray<Follow>>(args?: {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Note {
  id: ID_Output;
  title: String;
  body: String;
}

export interface NotePromise extends Promise<Note>, Fragmentable {
  id: () => Promise<ID_Output>;
  for: <T = FollowPromise>() => T;
  title: () => Promise<String>;
  body: () => Promise<String>;
}

export interface NoteSubscription
  extends Promise<AsyncIterator<Note>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  for: <T = FollowSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface NoteNullablePromise
  extends Promise<Note | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  for: <T = FollowPromise>() => T;
  title: () => Promise<String>;
  body: () => Promise<String>;
}

export interface FollowConnection {
  pageInfo: PageInfo;
  edges: FollowEdge[];
}

export interface FollowConnectionPromise
  extends Promise<FollowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FollowEdge>>() => T;
  aggregate: <T = AggregateFollowPromise>() => T;
}

export interface FollowConnectionSubscription
  extends Promise<AsyncIterator<FollowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FollowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFollowSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FollowEdge {
  node: Follow;
  cursor: String;
}

export interface FollowEdgePromise extends Promise<FollowEdge>, Fragmentable {
  node: <T = FollowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FollowEdgeSubscription
  extends Promise<AsyncIterator<FollowEdge>>,
    Fragmentable {
  node: <T = FollowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFollow {
  count: Int;
}

export interface AggregateFollowPromise
  extends Promise<AggregateFollow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFollowSubscription
  extends Promise<AsyncIterator<AggregateFollow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NoteConnection {
  pageInfo: PageInfo;
  edges: NoteEdge[];
}

export interface NoteConnectionPromise
  extends Promise<NoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteEdge>>() => T;
  aggregate: <T = AggregateNotePromise>() => T;
}

export interface NoteConnectionSubscription
  extends Promise<AsyncIterator<NoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteSubscription>() => T;
}

export interface NoteEdge {
  node: Note;
  cursor: String;
}

export interface NoteEdgePromise extends Promise<NoteEdge>, Fragmentable {
  node: <T = NotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteEdgeSubscription
  extends Promise<AsyncIterator<NoteEdge>>,
    Fragmentable {
  node: <T = NoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNote {
  count: Int;
}

export interface AggregateNotePromise
  extends Promise<AggregateNote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteSubscription
  extends Promise<AsyncIterator<AggregateNote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FollowSubscriptionPayload {
  mutation: MutationType;
  node: Follow;
  updatedFields: String[];
  previousValues: FollowPreviousValues;
}

export interface FollowSubscriptionPayloadPromise
  extends Promise<FollowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FollowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FollowPreviousValuesPromise>() => T;
}

export interface FollowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FollowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FollowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FollowPreviousValuesSubscription>() => T;
}

export interface FollowPreviousValues {
  id: ID_Output;
  githubID: String;
}

export interface FollowPreviousValuesPromise
  extends Promise<FollowPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  githubID: () => Promise<String>;
}

export interface FollowPreviousValuesSubscription
  extends Promise<AsyncIterator<FollowPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  githubID: () => Promise<AsyncIterator<String>>;
}

export interface NoteSubscriptionPayload {
  mutation: MutationType;
  node: Note;
  updatedFields: String[];
  previousValues: NotePreviousValues;
}

export interface NoteSubscriptionPayloadPromise
  extends Promise<NoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotePreviousValuesPromise>() => T;
}

export interface NoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotePreviousValuesSubscription>() => T;
}

export interface NotePreviousValues {
  id: ID_Output;
  title: String;
  body: String;
}

export interface NotePreviousValuesPromise
  extends Promise<NotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
}

export interface NotePreviousValuesSubscription
  extends Promise<AsyncIterator<NotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  githubID: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  githubID: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  githubID: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Follow",
    embedded: false
  },
  {
    name: "Note",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA"]}`,
  secret: `${process.env["SECRET"]}`
});
export const prisma = new Prisma();
